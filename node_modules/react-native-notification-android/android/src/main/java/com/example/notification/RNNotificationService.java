package com.example.notification;

import android.app.ActivityManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ApplicationInfo;
import android.os.Build;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

import com.facebook.common.util.HashCodeUtil;

import java.util.List;

public class RNNotificationService {
    public static final String ACTION_NOTIFICATION_CLICK_BROADCAST = "com.dhms.broadcast.notification.click";
    private static final String ACTION_NOTIFICATION_DELETE_BROADCAST ="com.dhms.broadcast.notification.delete";

    private static final String TAG = "RNNotificationService";
    private static final int NOTIFICATION_SHOW = 1;
    private static final int NOTIFICATION_DELETE = 2;
    private static final int NOTIFICATION_CLEAR = 3;

    private static RNNotificationService mInstance = null;
    private Context mContext;
    private NotificationManager mNotificationManager;
    private Handler mServiceHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case NOTIFICATION_SHOW:
                    doShowNotification(msg.obj.toString());
                    break;

                case NOTIFICATION_DELETE:
                    doDeleteNotification((Integer)msg.obj);
                    break;

                case NOTIFICATION_CLEAR:
                    doClearNotification();
                    break;
            }
        }
    };
    private int mNotificationNum = 0;

    private RNNotificationService(Context ctx) {
        this.mContext = ctx;
        this.mNotificationManager = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
        this.onCreate();
    }

    public void onCreate() {
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(ACTION_NOTIFICATION_DELETE_BROADCAST);
        intentFilter.addAction(ACTION_NOTIFICATION_CLICK_BROADCAST);
        mContext.registerReceiver(mBroadcastReceiver,intentFilter);
    }

    public void onDestroy() {
        mNotificationNum = 0;
        mInstance = null;
        mContext.unregisterReceiver(mBroadcastReceiver);
    }

    public static RNNotificationService getInstance(Context ctx) {
        if (mInstance == null){
            synchronized (RNNotificationService.class){
                if (mInstance == null){
                    mInstance = new RNNotificationService(ctx.getApplicationContext());
                }
            }
        }
        return mInstance;
    }

    public void onBind(Service service) {
        int mNotificationId = calcAppId();
        Notification notification=new Notification.Builder(mContext).build();
        service.startForeground(mNotificationId,notification);
        mNotificationManager.cancel(mNotificationId);
    }

    public void onUnBind(Service service) {
        service.stopForeground(true);
    }

    public void showNotification(String message) {
        if (mServiceHandler == null) {
            Log.e(TAG, "ServiceHandler is null");
            return;
        }
        Message msg = mServiceHandler.obtainMessage();
        msg.what = NOTIFICATION_SHOW;
        msg.obj = message;
        mServiceHandler.sendMessage(msg);
    }

    public void clearNotification() {
        if (mServiceHandler == null) {
            Log.e(TAG, "ServiceHandler is null");
            return;
        }
        Message msg = mServiceHandler.obtainMessage();
        msg.what = NOTIFICATION_CLEAR;
        mServiceHandler.sendMessage(msg);
    }

    public void deleteNotification(int id) {
        if (mServiceHandler == null) {
            Log.e(TAG, "ServiceHandler is null");
            return;
        }
        Message msg = mServiceHandler.obtainMessage();
        msg.what = NOTIFICATION_DELETE;
        msg.obj = id;
        mServiceHandler.sendMessage(msg);
    }

    private void doShowNotification(String message) {
        ApplicationInfo appInfo = mContext.getApplicationInfo();
        int appIcon = appInfo.icon;
        String appName = mContext.getPackageManager().getApplicationLabel(appInfo).toString();
        Notification notification;
        if (isAppIsInBackground()) {
            Intent intent = new Intent(Intent.ACTION_MAIN);
            intent.addCategory(Intent.CATEGORY_LAUNCHER);
            intent.setPackage(mContext.getPackageName());
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
            notification = new Notification.Builder(mContext)
                    .setSmallIcon(appIcon)
                    .setDefaults(Notification.DEFAULT_ALL)
                    .setTicker(message)
                    .setContentTitle(appName)
                    .setContentText(message)
                    .setContentIntent(PendingIntent.getActivity(mContext, 0, intent, 0))
                    .setDeleteIntent(PendingIntent.getBroadcast(mContext ,0 , new Intent(ACTION_NOTIFICATION_DELETE_BROADCAST) ,0))
                    .build();
        } else {
            notification = new Notification.Builder(mContext)
                    .setSmallIcon(appIcon)
                    .setDefaults(Notification.DEFAULT_ALL)
                    .setTicker(message)
                    .setContentTitle(appName)
                    .setContentText(message)
                    .setContentIntent(PendingIntent.getBroadcast(mContext ,0 , new Intent(ACTION_NOTIFICATION_CLICK_BROADCAST) ,0))
                    .setDeleteIntent(PendingIntent.getBroadcast(mContext ,0 , new Intent(ACTION_NOTIFICATION_DELETE_BROADCAST) ,0))
                    .build();
        }

        mNotificationManager.notify(mNotificationNum++,notification);
    }

    private void doClearNotification() {
        mNotificationManager.cancelAll();
        mNotificationNum = 0;
    }

    private void doDeleteNotification(int notificationId) {
        mNotificationManager.cancel(notificationId);
    }

    private void onNotificationDeleted(){
        if (mNotificationNum > 0)
            mNotificationNum--;
    }

    public int getNum(){
        return mNotificationNum;
    }

    private int calcAppId() {
        String appName = mContext.getPackageName();
        int hashCode = HashCodeUtil.hashCode(appName);
        Log.d(TAG,"app hashCode:"+hashCode);
        return hashCode;
    }

    private boolean isAppIsInBackground() {
        boolean isInBackground = true;
        ActivityManager am = (ActivityManager) mContext.getSystemService(Context.ACTIVITY_SERVICE);
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT_WATCH) {
            List<ActivityManager.RunningAppProcessInfo> runningProcesses = am.getRunningAppProcesses();
            for (ActivityManager.RunningAppProcessInfo processInfo : runningProcesses) {
                if (processInfo.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {
                    for (String activeProcess : processInfo.pkgList) {
                        if (activeProcess.equals(mContext.getPackageName())) {
                            isInBackground = false;
                        }
                    }
                }
            }
        } else {
            List<ActivityManager.RunningTaskInfo> taskInfo = am.getRunningTasks(1);
            ComponentName componentInfo = taskInfo.get(0).topActivity;
            if (componentInfo.getPackageName().equals(mContext.getPackageName())) {
                isInBackground = false;
            }
        }

        return isInBackground;
    }


    private BroadcastReceiver mBroadcastReceiver =new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            Log.d(TAG, "Receive broadcast:" + action);
            if (ACTION_NOTIFICATION_DELETE_BROADCAST.equals(action)){
                onNotificationDeleted();
            }else if (ACTION_NOTIFICATION_CLICK_BROADCAST.equals(action)){
                RNNotificationAndroidHelper.getInstance().onClickNotification();
            }
        }
    };

}
